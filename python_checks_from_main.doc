# Python Code Quality Guidelines

## Code Style & Formatting
- Follow PEP 8 style guide strictly
- Use 4 spaces per indentation level (no tabs)
- Maximum line length: 88 characters (Black formatter standard)
- Use single quotes for strings unless double quotes are required
- Import statements should be grouped and ordered: standard library, third-party, local

## Naming Conventions
- Variables and functions: snake_case (e.g., user_name, process_data)
- Classes: PascalCase (e.g., UserService, DataProcessor)
- Constants: UPPER_SNAGE_CASE (e.g., MAX_RETRY_COUNT, DEFAULT_TIMEOUT)
- Protected methods: _single_underscore_prefix
- Private methods: __double_underscore_prefix

## Code Quality Rules
- Functions should have maximum 3 parameters
- Functions should be small and do one thing (max 50 lines)
- Avoid using global variables
- Use list comprehensions instead of map/filter when readable
- Prefer f-strings over % formatting or .format()

## Error Handling
- Use specific exceptions rather than bare except clauses
- Include meaningful error messages
- Use custom exception classes for domain-specific errors
- Log exceptions with appropriate context using logging module

## Type Hints & Documentation
- Use type hints for all function parameters and return values
- Write docstrings for all public functions and classes
- Follow Google style docstring format
- Use meaningful variable names that indicate purpose

## Performance & Memory
- Use generator expressions for large datasets
- Avoid repeated function calls in loops
- Use context managers (with statements) for resource management
- Prefer local variable access over global/distant variable access

## Testing Requirements
- Write unit tests for all business logic functions
- Use pytest framework for testing
- Test names should describe the behavior being tested
- Mock external dependencies in tests
- Aim for at least 80% code coverage
