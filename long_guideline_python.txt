# Python Code Quality Guidelines - Line Length Enforcement

## Strict Line Length Rules
- Naming Conventions
  - Variables and functions: snake_case (e.g., user_name, process_data)
  - Classes: PascalCase (e.g., UserService, DataProcessor)
  - Constants: UPPER_SNAGE_CASE (e.g., MAX_RETRY_COUNT, DEFAULT_TIMEOUT)
  - Protected methods: _single_underscore_prefix
  - Private methods: __double_underscore_prefix
- Maximum line length must not exceed 79 characters as per PEP 8 standards
- Lines should be broken using parentheses, backslashes, or implicit line continuation
- Function calls with multiple arguments should break after each argument
- Long string literals should be broken into multiple concatenated strings
- Import statements should not exceed line length limits
- Comments and docstrings should also adhere to line length limits
- No exceptions allowed for any type of code including class definitions, function definitions, variable assignments, or any other Python constructs
- Use proper indentation (4 spaces) when breaking lines across multiple lines
- Avoid using extremely long variable names that cause line length violations
- Break mathematical expressions across multiple lines for readability
- Long dictionary and list literals should be formatted across multiple lines
- Method chaining should be broken into multiple lines when exceeding length limits
- Conditional expressions should be broken into multiple lines when too long
- Type annotations should not cause line length violations - break them appropriately
- F-strings with long expressions should be broken or simplified
- Exception handling blocks should not contain overly long lines in try/except/finally blocks
- Decorators applied to functions should not cause line length violations
- Class inheritance declarations should break across lines when too long
- With statements containing multiple context managers should break across lines
- Any line that exceeds 79 characters is considered a violation regardless of context
- This rule applies to all Python files in the project without exceptions
- Automated tools should enforce this rule during pre-commit hooks and CI/CD pipelines
- Code reviews must reject any pull requests containing lines that violate this rule
- Legacy code should be refactored to comply with this line length standard
- Temporary exceptions are not permitted for any reason including test code or configuration files
- Documentation within code files must also adhere to the line length limit
- String formatting operations should be broken to avoid long lines
- Regular expression patterns that are too long should be broken using verbose mode
- Configuration dictionaries and data structures should be formatted across multiple lines
- API call chains and method invocations must be broken when exceeding the limit
- List comprehensions and generator expressions that are too long should be rewritten as loops
- Lambda functions that exceed line length should be converted to regular functions
- Class and function definitions with long parameter lists must be properly formatted
- Any construct that cannot be broken within 79 characters should be reconsidered and refactored
